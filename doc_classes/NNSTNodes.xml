<?xml version="1.0" encoding="UTF-8" ?>
<class name="NNSTNodes" inherits="NoodleNodes" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
		A state management structure that is a hybrid of a behaviour tree and a hierarchical state machine.
	</brief_description>
	<description>
		A StateTree is a state management structure that is a hybrid of a behaviour tree and a hierarchical state machine.
		The Noodle Nodes GDExtensions State Tree is just three nodes: [NNSTRoot], [NNSTParallel] and [NNSTNode]. The State Tree nodes are utility-enabled, which means that if desired, the node selection for a state can be done by using [NNConsideration] nodes. Alternatively a [method on_enter_condition] method can be defined for the State Tree nodes to define the selection logic.
		When the tree is ticked for the first time, a set of active states is selected by evaluating the child nodes of the root node, and the childs of the child nodes, until a leaf node is found that can be activated (i.e. its [method on_enter_condition] method returns [code]true[/code] or utility-based evaluation selects it as the highest-scoring node). All the State Tree nodes from the root node all the way down to the found leaf node are then considered as "active". On subsequent calls to the root node [method NNSTRoot.tick] method, all the active nodes are ticked in top-to-down order from the root to the leaf node. This allows you to create a hierarchy of states with shared logic on the top-level nodes and more specific logic on the leaf nodes. You can select the child node evaluation method for each State Tree node by setting the [member child_state_selection_rule] property.
		User-defined methods [code]on_enter_condition(blackboard, delta) -&gt; bool[/code], [code]on_enter_state(blackboard, delta)[/code], [code]on_exit_state(blackboard, delta)[/code] and [code]on_tick(blackboard, delta)[/code] can be defined to create your custom state activation and handling logic. Alternatively, you can also use the signals [signal state_check_enter_condition], [signal state_entered], [signal state_exited] and [signal state_ticked].
		The states are changed by calling the [method transition_to] method and by providing a [NodePath] to a child node of the State Tree root node as a target state. The child nodes of the target node are evaluated, all the way down the tree, until a leaf State Tree node is activated. If no active leaf node is found, the state transition fails and the State Tree remains in the existing state.
		[b]Note:[/b] When a scene with a State Tree is first run, during the first call to the tick() method the State Tree will automatically transition to the root node to find the initial set of active states.
		When the state changes, the [code]on_exit_state()[/code] method is called for existing state nodes that are not included in the new state set. Similarly, for new state nodes that were not included in the existing state set, the [code]on_enter_state()[/code] method is called.
		During a tick, the [code]on_tick()[/code] method is called for all the active states.
		You construct a State Tree by threeirst adding a [[]], [NNSTParallel] node[ to] your scene. Under the root node you add [NNSTNodes], and you can keep adding further [NNSTNodes] until you have the state structure you need.
	</description>
	<tutorials>
	</tutorials>
</class>
