<?xml version="1.0" encoding="UTF-8" ?>
<class name="NNSTNodes" inherits="NoodleNodes" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
		A state management structure that is a hybrid of a behaviour tree and a hierarchical state machine.
	</brief_description>
	<description>
		A StateTree is a state management structure that is a hybrid of a behaviour tree and a hierarchical state machine.
		The Noodle Nodes GDExtensions State Tree is just three nodes: [NNSTRoot], [NNSTParallel] and [NNSTNode]. The State Tree nodes are utility-enabled, which means that if desired, the node selection for a state can be done by using [NNConsideration] nodes. Alternatively a [method on_enter_condition] method can be defined for the State Tree nodes to define the selection logic.
		When the tree is ticked for the first time, a set of active states is selected by evaluating the child nodes of the root node, and the childs of the child nodes, until a leaf node is found that can be activated (i.e. its [method on_enter_condition] method returns [code]true[/code] or utility-based evaluation selects it as the highest-scoring node). All the State Tree nodes from the root node all the way down to the found leaf node are then considered as "active". On subsequent calls to the root node [method NNSTRoot.tick] method, all the active nodes are ticked in top-to-down order from the root to the leaf node. This allows you to create a hierarchy of states with shared logic on the top-level nodes and more specific logic on the leaf nodes. You can select the child node evaluation method for each State Tree node by setting the [member child_state_selection_rule] property.
		User-defined methods [code]on_enter_condition(blackboard, delta) -&gt; bool[/code], [code]on_enter_state(blackboard, delta)[/code], [code]on_exit_state(blackboard, delta)[/code] and [code]on_tick(blackboard, delta)[/code] can be defined to create your custom state activation and handling logic. Alternatively, you can also use the signals [signal state_check_enter_condition], [signal state_entered], [signal state_exited] and [signal state_ticked].
		The states are changed by calling the [method transition_to] method and by providing a [NodePath] to a child node of the State Tree root node as a target state. The child nodes of the target node are evaluated, all the way down the tree, until a leaf State Tree node is activated. If no active leaf node is found, the state transition fails and the State Tree remains in the existing state.
		[b]Note:[/b] When a scene with a State Tree is first run, during the first call to the tick() method the State Tree will automatically transition to the root node to find the initial set of active states.
		When the state changes, the [code]on_exit_state()[/code] method is called for existing state nodes that are not included in the new state set. Similarly, for new state nodes that were not included in the existing state set, the [code]on_enter_state()[/code] method is called.
		During a tick, the [code]on_tick()[/code] method is called for all the active states.
		You construct a State Tree by threeirst adding a [[]], [NNSTParallel] node[ to] your scene. Under the root node you add [NNSTNodes], and you can keep adding further [NNSTNodes] until you have the state structure you need.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="get_on_entered_condition" qualifiers="const">
			<return type="bool" />
			<description>
				Returns the value used to determine if the state may be entered. Change by calling [method set_on_entered_condition]
			</description>
		</method>
		<method name="get_tree_root" qualifiers="const">
			<return type="NNSTNodes" />
			<description>
				Returns the root node of the state tree.
			</description>
		</method>
		<method name="on_enter_condition" qualifiers="virtual">
			<return type="bool" />
			<param index="0" name="blackboard" type="Variant" />
			<param index="1" name="delta" type="float" />
			<description>
				Do your logic here to decide when this node should be activated. Return [code]true[/code] or [code]false[/code] based on your logic. If this method isn't implemented in your node and no event is defined, this will return [code]true[/code].  This will execute before the corrosponding signal.
			</description>
		</method>
		<method name="on_enter_state" qualifiers="virtual">
			<return type="void" />
			<param index="0" name="blackboard" type="Variant" />
			<param index="1" name="delta" type="float" />
			<description>
				Logic to initialize your state. This will execute before the corrosponding signal.
			</description>
		</method>
		<method name="on_exit_state" qualifiers="virtual">
			<return type="void" />
			<param index="0" name="blackboard" type="Variant" />
			<param index="1" name="delta" type="float" />
			<description>
				Logic to clean up before exiting. This will execute before the corrosponding signal.
			</description>
		</method>
		<method name="on_input" qualifiers="virtual">
			<return type="void" />
			<param index="0" name="event" type="InputEvent" />
			<description>
				See [method Node._input]. The [member internal_status] property must also be set to `Active` for this function to fire.
			</description>
		</method>
		<method name="on_tick" qualifiers="virtual">
			<return type="void" />
			<param index="0" name="blackboard" type="Variant" />
			<param index="1" name="delta" type="float" />
			<description>
				Logic to run when a state is ticked. This will execute before the corrosponding signal.
			</description>
		</method>
		<method name="send_event">
			<return type="void" />
			<param index="0" name="name" type="String" />
			<param index="1" name="blackboard" type="Variant" />
			<param index="2" name="delta" type="float" />
			<description>
				Sends an event to all active children of the current state in order, followed by their children and so on until the event is consumed. Events will trigger transitions and actions via emitted signals.
			</description>
		</method>
		<method name="set_on_entered_condition">
			<return type="void" />
			<param index="0" name="is_entered" type="bool" />
			<description>
				If no [method on_enter_condition] method exists, this value will be used to determine if the state may be entered.
			</description>
		</method>
		<method name="transition_to">
			<return type="void" />
			<param index="0" name="new_state_nodepath" type="NodePath" />
			<param index="1" name="blackboard" type="Variant" />
			<param index="2" name="delta" type="float" />
			<description>
				This method is used to transition between states in the Stae Tree. You must provide the [NodePath] (relative to the State Tree root node) for the target state and you can provide any Godot variant type as a parameter (usually a node used as an actor or a dictionary used as a blackboard), along with a delta-time. `blackboard` and `delta` are passed to the [method on_enter_condition] method when selecting the active states.
			</description>
		</method>
	</methods>
	<members>
		<member name="child_state_selection_rule" type="int" setter="set_child_state_selection_rule" getter="get_child_state_selection_rule" default="0">
			Defines how the child state is chosen. Can be one of the following: "OnEnterConditionMethod:0,UtilityScoring:1", where "OnEnterConditionMethod" means that the user-defined [method on_enter_condition] method is called and if it returns [code]true[/code], the state is selected. "UtilityScoring" option uses the considerations set in the properties of the state and/or as child nodes. The highest-scoring state will be chosen.
		</member>
		<member name="evaluation_method" type="int" setter="set_evaluation_method" getter="get_evaluation_method" default="4">
			Defines how the considerations are aggregated. Can be one of the following: "Sum:0,Min:1,Max:2,Mean:3,Multiply:4,FirstNonZero:5".
		</member>
		<member name="internal_status" type="int" setter="set_internal_status" getter="get_internal_status" default="0">
			The current internal status of the node, useful for debugging and seeing how the execution progresses. The following choices are possible: "Inactive:0,Active:1".
		</member>
		<member name="score" type="float" setter="set_score" getter="get_score" default="0.0">
		</member>
	</members>
	<signals>
		<signal name="state_check_enter_condition">
			<param index="0" name="blackboard" type="Object" />
			<param index="1" name="delta" type="float" />
			<description>
				Emitted when the the [method on_enter_condition] check needs to be done. The signal must call the [method set_on_entered_condition] method with either [code]true[/code] or [code]false[/code] as the parameter to indicate if the state should be entered or not.
			</description>
		</signal>
		<signal name="state_entered">
			<param index="0" name="blackboard" type="Object" />
			<param index="1" name="delta" type="float" />
			<description>
				Emitted when the state is entered. Add any state initialization to this signal handler.
			</description>
		</signal>
		<signal name="state_exited">
			<param index="0" name="blackboard" type="Object" />
			<param index="1" name="delta" type="float" />
			<description>
				Emitted when the state is exited. Add any state deinitialization to this signal handler.
			</description>
		</signal>
		<signal name="state_ticked">
			<param index="0" name="blackboard" type="Object" />
			<param index="1" name="delta" type="float" />
			<description>
				Emitted when the state is ticked. Add state update logic to this signal handler.
			</description>
		</signal>
	</signals>
</class>
