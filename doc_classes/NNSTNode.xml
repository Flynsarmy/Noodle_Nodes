<?xml version="1.0" encoding="UTF-8" ?>
<class name="NNSTNode" inherits="NNSTTaskNodes" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
		Runs business logic for a state tree.
	</brief_description>
	<description>
		This is the workhorse of the State Tree. It acts as all the other levels of the state tree other than the tree root. If a [NNSTNode] has no child nodes, it is considered a leaf node. If it has child nodes, it is considered like a selector in a behaviour tree: it will evaluate its child nodes to find a leaf node to activate.
		To make use of the [NNSTNode], define the following methods for all the nodes:
		[gdscript]
		extends NNSTNode

		func on_enter_condition(blackboard: Variant, delta: float) -&gt; bool:
		    # Do your logic here to decide when this node should be activated.
		    # Return true or false based on your logic.
		    return true

		func on_enter_state(blackboard: Variant, delta: float) -&gt; void:
		    # Initialize your state here.
		    pass

		func on_exit_state(blackboard: Variant, delta: float) -&gt; void:
		    # Clean up before exiting the state here.
		    pass

		func on_tick(blackboard: Variant, delta: float) -&gt; void:
		    # Do what ever the state needs to do here.
		    pass
		[/gdscript]
		[b]Note:[/b] You can rename the [param blackboard] parameter what ever you want. Most common ones would be blackboard if you are using a dictionary to share variables between your states, and actor if you just pass the root node of your AI entity scene.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="get_on_entered_condition" qualifiers="const">
			<return type="bool" />
			<description>
				Returns the value used to determine if the state may be entered. Change by calling [method set_on_entered_condition]
			</description>
		</method>
		<method name="get_root" qualifiers="const">
			<return type="NNSTRoot" />
			<description>
				Returns the [NNSTRoot] root node of the state tree.
			</description>
		</method>
		<method name="on_enter_condition" qualifiers="virtual">
			<return type="bool" />
			<param index="0" name="blackboard" type="Variant" />
			<param index="1" name="delta" type="float" />
			<description>
				Do your logic here to decide when this node should be activated. Return [code]true[/code] or [code]false[/code] based on your logic. If this method isn't implemented in your node and no event is defined, this will return [code]true[/code].  This will execute before the corrosponding signal.
			</description>
		</method>
		<method name="on_enter_state" qualifiers="virtual">
			<return type="void" />
			<param index="0" name="blackboard" type="Variant" />
			<param index="1" name="delta" type="float" />
			<description>
				Logic to initialize your state. This will execute before the corrosponding signal.
			</description>
		</method>
		<method name="on_exit_state" qualifiers="virtual">
			<return type="void" />
			<param index="0" name="blackboard" type="Variant" />
			<param index="1" name="delta" type="float" />
			<description>
				Logic to clean up before exiting. This will execute before the corrosponding signal.
			</description>
		</method>
		<method name="on_tick" qualifiers="virtual">
			<return type="void" />
			<param index="0" name="blackboard" type="Variant" />
			<param index="1" name="delta" type="float" />
			<description>
				Logic to run when a state is ticked. This will execute before the corrosponding signal.
			</description>
		</method>
		<method name="set_on_entered_condition">
			<return type="void" />
			<param index="0" name="is_entered" type="bool" />
			<description>
				If no [method on_enter_condition] method exists, this value will be used to determine if the state may be entered.
			</description>
		</method>
		<method name="transition_to">
			<return type="void" />
			<param index="0" name="new_state_nodepath" type="NodePath" />
			<param index="1" name="blackboard" type="Variant" />
			<param index="2" name="delta" type="float" />
			<description>
				Transitions between states in the Stae Tree. Requires a [NodePath] (relative to the node calling this method) for the target state and you can provide any Godot variant type as a parameter (usually a node used as an actor or a dictionary used as a blackboard), along with a delta-time. `blackboard` and `delta` are passed to the [method on_enter_condition] method when selecting the active states.
			</description>
		</method>
	</methods>
	<members>
		<member name="evaluation_method" type="int" setter="set_evaluation_method" getter="get_evaluation_method" default="4">
			Defines how the considerations are aggregated. Can be one of the following: `Sum:0,Min:1,Max:2,Mean:3,Multiply:4,FirstNonZero:5`.
		</member>
		<member name="score" type="float" setter="set_score" getter="get_score" default="0.0">
		</member>
	</members>
</class>
